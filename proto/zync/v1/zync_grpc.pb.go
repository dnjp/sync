// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: zync.proto

package zync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZyncClient is the client API for Zync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZyncClient interface {
	// AddFiles adds a single file to IPFS if the provided
	// path is to an individual file, or it will recursively
	// add all files within a directory if the provided path
	// is a directory
	AddFiles(ctx context.Context, in *RegexRequest, opts ...grpc.CallOption) (Zync_AddFilesClient, error)
	// ListFiles lists all files matching the pattern from
	// zync
	ListFiles(ctx context.Context, in *RegexRequest, opts ...grpc.CallOption) (Zync_ListFilesClient, error)
	// DeleteFiles removes all files matching the pattern
	// from zync
	DeleteFiles(ctx context.Context, in *RegexRequest, opts ...grpc.CallOption) (Zync_DeleteFilesClient, error)
	// Backup communicates to the server that any cached
	// data should be backed up to IPFS, returning the
	// resulting CID
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupStatus, error)
	// Restore initiates the process of restoring files
	// from IPFS to the host machine
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (Zync_RestoreClient, error)
}

type zyncClient struct {
	cc grpc.ClientConnInterface
}

func NewZyncClient(cc grpc.ClientConnInterface) ZyncClient {
	return &zyncClient{cc}
}

func (c *zyncClient) AddFiles(ctx context.Context, in *RegexRequest, opts ...grpc.CallOption) (Zync_AddFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Zync_ServiceDesc.Streams[0], "/zync.v1.zync/AddFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &zyncAddFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zync_AddFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type zyncAddFilesClient struct {
	grpc.ClientStream
}

func (x *zyncAddFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zyncClient) ListFiles(ctx context.Context, in *RegexRequest, opts ...grpc.CallOption) (Zync_ListFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Zync_ServiceDesc.Streams[1], "/zync.v1.zync/ListFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &zyncListFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zync_ListFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type zyncListFilesClient struct {
	grpc.ClientStream
}

func (x *zyncListFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zyncClient) DeleteFiles(ctx context.Context, in *RegexRequest, opts ...grpc.CallOption) (Zync_DeleteFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Zync_ServiceDesc.Streams[2], "/zync.v1.zync/DeleteFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &zyncDeleteFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zync_DeleteFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type zyncDeleteFilesClient struct {
	grpc.ClientStream
}

func (x *zyncDeleteFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zyncClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupStatus, error) {
	out := new(BackupStatus)
	err := c.cc.Invoke(ctx, "/zync.v1.zync/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zyncClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (Zync_RestoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Zync_ServiceDesc.Streams[3], "/zync.v1.zync/Restore", opts...)
	if err != nil {
		return nil, err
	}
	x := &zyncRestoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zync_RestoreClient interface {
	Recv() (*RestoreStatusUpdate, error)
	grpc.ClientStream
}

type zyncRestoreClient struct {
	grpc.ClientStream
}

func (x *zyncRestoreClient) Recv() (*RestoreStatusUpdate, error) {
	m := new(RestoreStatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZyncServer is the server API for Zync service.
// All implementations must embed UnimplementedZyncServer
// for forward compatibility
type ZyncServer interface {
	// AddFiles adds a single file to IPFS if the provided
	// path is to an individual file, or it will recursively
	// add all files within a directory if the provided path
	// is a directory
	AddFiles(*RegexRequest, Zync_AddFilesServer) error
	// ListFiles lists all files matching the pattern from
	// zync
	ListFiles(*RegexRequest, Zync_ListFilesServer) error
	// DeleteFiles removes all files matching the pattern
	// from zync
	DeleteFiles(*RegexRequest, Zync_DeleteFilesServer) error
	// Backup communicates to the server that any cached
	// data should be backed up to IPFS, returning the
	// resulting CID
	Backup(context.Context, *BackupRequest) (*BackupStatus, error)
	// Restore initiates the process of restoring files
	// from IPFS to the host machine
	Restore(*RestoreRequest, Zync_RestoreServer) error
	mustEmbedUnimplementedZyncServer()
}

// UnimplementedZyncServer must be embedded to have forward compatible implementations.
type UnimplementedZyncServer struct {
}

func (UnimplementedZyncServer) AddFiles(*RegexRequest, Zync_AddFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method AddFiles not implemented")
}
func (UnimplementedZyncServer) ListFiles(*RegexRequest, Zync_ListFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedZyncServer) DeleteFiles(*RegexRequest, Zync_DeleteFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedZyncServer) Backup(context.Context, *BackupRequest) (*BackupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedZyncServer) Restore(*RestoreRequest, Zync_RestoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedZyncServer) mustEmbedUnimplementedZyncServer() {}

// UnsafeZyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZyncServer will
// result in compilation errors.
type UnsafeZyncServer interface {
	mustEmbedUnimplementedZyncServer()
}

func RegisterZyncServer(s grpc.ServiceRegistrar, srv ZyncServer) {
	s.RegisterService(&Zync_ServiceDesc, srv)
}

func _Zync_AddFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZyncServer).AddFiles(m, &zyncAddFilesServer{stream})
}

type Zync_AddFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type zyncAddFilesServer struct {
	grpc.ServerStream
}

func (x *zyncAddFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _Zync_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZyncServer).ListFiles(m, &zyncListFilesServer{stream})
}

type Zync_ListFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type zyncListFilesServer struct {
	grpc.ServerStream
}

func (x *zyncListFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _Zync_DeleteFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegexRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZyncServer).DeleteFiles(m, &zyncDeleteFilesServer{stream})
}

type Zync_DeleteFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type zyncDeleteFilesServer struct {
	grpc.ServerStream
}

func (x *zyncDeleteFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _Zync_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZyncServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zync.v1.zync/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZyncServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zync_Restore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RestoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZyncServer).Restore(m, &zyncRestoreServer{stream})
}

type Zync_RestoreServer interface {
	Send(*RestoreStatusUpdate) error
	grpc.ServerStream
}

type zyncRestoreServer struct {
	grpc.ServerStream
}

func (x *zyncRestoreServer) Send(m *RestoreStatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// Zync_ServiceDesc is the grpc.ServiceDesc for Zync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zync.v1.zync",
	HandlerType: (*ZyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Backup",
			Handler:    _Zync_Backup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddFiles",
			Handler:       _Zync_AddFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListFiles",
			Handler:       _Zync_ListFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteFiles",
			Handler:       _Zync_DeleteFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Restore",
			Handler:       _Zync_Restore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zync.proto",
}
